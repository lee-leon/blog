{"version":3,"sources":["webpack:///./src/pages/categories.jsx","webpack:///./src/components/Header.jsx"],"names":["TagsContainer","Object","react_emotion__WEBPACK_IMPORTED_MODULE_3__","b","target","props","theme","tint","black","colors","light","borderRadius","default","polished__WEBPACK_IMPORTED_MODULE_6__","a","Number","lighter","Categories","_ref","_ref$data$allMarkdown","data","allMarkdownRemark","group","edges","react__WEBPACK_IMPORTED_MODULE_0___default","createElement","elements__WEBPACK_IMPORTED_MODULE_8__","c","react_helmet__WEBPACK_IMPORTED_MODULE_7___default","title","_config_website__WEBPACK_IMPORTED_MODULE_9___default","siteTitle","_components_Header__WEBPACK_IMPORTED_MODULE_11__","lodash_size__WEBPACK_IMPORTED_MODULE_5___default","map","category","gatsby__WEBPACK_IMPORTED_MODULE_1__","key","fieldValue","to","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_4___default","totalCount","_components_Footer__WEBPACK_IMPORTED_MODULE_10__","__webpack_exports__","y","propTypes","prop_types__WEBPACK_IMPORTED_MODULE_2___default","shape","array","isRequired","pageQuery","Wrapper","react_emotion__WEBPACK_IMPORTED_MODULE_2__","gradient","rightToLeft","big","breakpoints","m","s","Text","white","base","layout","Subtitle","blue","Header","children","react__WEBPACK_IMPORTED_MODULE_1___default","elements__WEBPACK_IMPORTED_MODULE_4__","f","prop_types__WEBPACK_IMPORTED_MODULE_3___default","any","oneOfType","string","object","bool","defaultProps"],"mappings":"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","file":"component---src-pages-categories-jsx-41ec3b7ba354d4bce04e.js","sourcesContent":["import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport styled from 'react-emotion';\nimport kebabCase from 'lodash/kebabCase';\nimport size from 'lodash/size';\nimport { darken } from 'polished';\nimport Helmet from 'react-helmet';\nimport { Container, Layout } from 'elements';\nimport config from '../../config/website';\nimport Footer from '../components/Footer';\nimport Header from '../components/Header';\n\nconst TagsContainer = styled.div`\n  margin: 2rem 0 4rem 0;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  a {\n    background: ${props => props.theme.tint.black};\n    color: ${props => props.theme.colors.black.light};\n    padding: 0.25rem 0.85rem;\n    border-radius: ${props => props.theme.borderRadius.default};\n    margin: 0.3rem 0.6rem 0.3rem 0;\n    white-space: nowrap;\n    &:hover {\n      background: ${props => darken(0.35, props.theme.tint.black)};\n      color: ${props => darken(0.35, props.theme.colors.black.light)};\n    }\n  }\n`;\n\nconst Number = styled.span`\n  margin-left: 0.75rem;\n  font-size: 0.9rem;\n  color: ${props => props.theme.colors.black.lighter};\n`;\n\nconst Categories = ({\n  data: {\n    allMarkdownRemark: { group, edges },\n  },\n}) => (\n  <Layout>\n    <Helmet title={`Kategorien | ${config.siteTitle}`} />\n    <Header title=\"Kategorien\">\n      {size(edges)} Beitr√§ge wurden in {size(group)} Kategorien eingeteilt\n    </Header>\n    <Container>\n      <TagsContainer>\n        {group.map(category => (\n          <Link key={category.fieldValue} to={`/categories/${kebabCase(category.fieldValue)}`}>\n            <span>\n              {category.fieldValue} <Number>{category.totalCount}</Number>\n            </span>\n          </Link>\n        ))}\n      </TagsContainer>\n    </Container>\n    <Footer />\n  </Layout>\n);\n\nexport default Categories;\n\nCategories.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      group: PropTypes.array.isRequired,\n      edges: PropTypes.array.isRequired,\n    }),\n  }).isRequired,\n};\n\nexport const pageQuery = graphql`\n  query CategoriesPage {\n    allMarkdownRemark(filter: { fields: { sourceInstanceName: { eq: \"blog\" } } }) {\n      group(field: frontmatter___category) {\n        fieldValue\n        totalCount\n      }\n      edges {\n        node {\n          id\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport styled from 'react-emotion';\nimport PropTypes from 'prop-types';\nimport { Wave } from 'elements';\n\nconst Wrapper = styled.header`\n  background: ${props => props.theme.gradient.rightToLeft};\n  height: ${props => (props.big ? '650px' : '450px')};\n  @media (max-width: ${props => props.theme.breakpoints.m}) {\n    height: ${props => (props.big ? '600px' : '400px')};\n  }\n  @media (max-width: ${props => props.theme.breakpoints.s}) {\n    height: ${props => (props.big ? '500px' : '325px')};\n  }\n  position: relative;\n  overflow: hidden;\n`;\n\nconst Text = styled.div`\n  color: ${props => props.theme.colors.white.base};\n  z-index: 1000;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  width: 100%;\n  max-width: ${props => props.theme.layout.base};\n  padding: 0 2rem;\n  margin-bottom: 7rem;\n  align-items: center;\n`;\n\nconst Subtitle = styled.p`\n  max-width: 650px;\n  color: ${props => props.theme.colors.white.blue};\n`;\n\nconst Header = ({ children, title, big }) => (\n  <Wrapper big={big}>\n    <Text>\n      <h1>{title}</h1>\n      {children && <Subtitle>{children}</Subtitle>}\n    </Text>\n    <Wave />\n  </Wrapper>\n);\n\nexport default Header;\n\nHeader.propTypes = {\n  children: PropTypes.any,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n  big: PropTypes.bool,\n};\n\nHeader.defaultProps = {\n  big: false,\n  children: false,\n};\n"],"sourceRoot":""}