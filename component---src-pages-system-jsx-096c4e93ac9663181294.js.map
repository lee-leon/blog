{"version":3,"sources":["webpack:///./src/components/Header.jsx","webpack:///./src/components/ItemBlog.jsx","webpack:///./src/pages/system.jsx"],"names":["Wrapper","props","theme","gradient","rightToLeft","big","breakpoints","m","s","Text","colors","white","base","layout","Subtitle","blue","Header","children","title","defaultProps","Image","shadow","feature","small","default","transitions","boom","transition","borderRadius","hover","Information","black","duration","primary","Statistics","lighter","Excerpt","ItemBlog","path","cover","category","date","timeToRead","excerpt","to","fluid","className","hideS","kebabCase","Base","System","edges","data","allMarkdownRemark","config","siteTitle","type","map","system","key","node","frontmatter","fields","slug","childImageSharp","tags","pageQuery"],"mappings":"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","file":"component---src-pages-system-jsx-096c4e93ac9663181294.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled'\nimport PropTypes from 'prop-types';\nimport { Wave } from 'elements';\n\nconst Wrapper = styled.header`\n  background: ${props => props.theme.gradient.rightToLeft};\n  height: ${props => (props.big ? '650px' : '450px')};\n  @media (max-width: ${props => props.theme.breakpoints.m}) {\n    height: ${props => (props.big ? '600px' : '400px')};\n  }\n  @media (max-width: ${props => props.theme.breakpoints.s}) {\n    height: ${props => (props.big ? '500px' : '325px')};\n  }\n  position: relative;\n  overflow: hidden;\n`;\n\nconst Text = styled.div`\n  color: ${props => props.theme.colors.white.base};\n  z-index: 1000;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  width: 100%;\n  max-width: ${props => props.theme.layout.base};\n  padding: 0 2rem;\n  margin-bottom: 7rem;\n  align-items: center;\n`;\n\nconst Subtitle = styled.p`\n  max-width: 650px;\n  color: ${props => props.theme.colors.white.blue};\n`;\n\nconst Header = ({ children, title, big }) => (\n  <Wrapper big={big}>\n    <Text>\n      <h1>{title}</h1>\n      {children && <Subtitle>{children}</Subtitle>}\n    </Text>\n    <Wave />\n  </Wrapper>\n);\n\nexport default Header;\n\nHeader.propTypes = {\n  children: PropTypes.any,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n  big: PropTypes.bool,\n};\n\nHeader.defaultProps = {\n  big: false,\n  children: false,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from '@emotion/styled'\nimport {Link} from 'gatsby';\nimport Img from 'gatsby-image';\nimport kebabCase from 'lodash/kebabCase';\nimport { hideS } from 'utilities';\n\nconst Wrapper = styled.article`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin-bottom: 4rem;\n`;\n\nconst Image = styled.div`\n  position: relative;\n  box-shadow: ${props => props.theme.shadow.feature.small.default};\n  transition: ${props => props.theme.transitions.boom.transition};\n  border-radius: ${props => props.theme.borderRadius.default};\n  min-height: 300px;\n  img {\n    border-radius: ${props => props.theme.borderRadius.default};\n  }\n  &:hover {\n    box-shadow: ${props => props.theme.shadow.feature.small.hover};\n    transform: translateY(-12px);\n  }\n  a {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    > div {\n      position: static !important;\n    }\n    > div > div {\n      position: static !important;\n    }\n  }\n  flex-basis: calc(99.9% * 2 / 5 - 1rem);\n  max-width: calc(99.9% * 2 / 5 - 1rem);\n  width: calc(99.9% * 2 / 5 - 1rem);\n  @media (max-width: 800px) {\n    flex-basis: 100%;\n    max-width: 100%;\n    width: 100%;\n    margin-bottom: 1.5rem;\n  }\n  @media (max-width: 500px) {\n    min-height: 200px;\n  }\n`;\n\nconst Information = styled.div`\n  h1 {\n    font-size: 2rem;\n    margin-bottom: 1.25rem;\n    display: inline-block;\n    color: ${props => props.theme.colors.black.base};\n    transition: all ${props => props.theme.transitions.default.duration};\n    &:hover {\n      color: ${props => props.theme.colors.primary.base};\n    }\n  }\n\n  flex-basis: calc(99.9% * 3 / 5 - 1rem);\n  max-width: calc(99.9% * 3 / 5 - 1rem);\n  width: calc(99.9% * 3 / 5 - 1rem);\n  @media (max-width: 800px) {\n    flex-basis: 100%;\n    max-width: 100%;\n    width: 100%;\n  }\n`;\n\nconst Statistics = styled.div`\n  color: ${props => props.theme.colors.black.lighter};\n`;\n\nconst Excerpt = styled.div`\n  margin-top: 2rem;\n`;\n\nconst ItemBlog = ({ path, cover, category, title, date, timeToRead, excerpt }) => (\n  <Wrapper>\n    <Image>\n      <Link to={path}>\n        <Img fluid={cover} />\n      </Link>\n    </Image>\n    <Information>\n      <Link to={path}>\n        <h1>{title}</h1>\n      </Link>\n      <Statistics>\n        <span className={hideS}>Category: </span>\n        <Link to={`/categories/${kebabCase(category)}`}>{category}</Link> &mdash; {timeToRead} Minutes Read &mdash; {date}\n      </Statistics>\n      <Excerpt>{excerpt}</Excerpt>\n    </Information>\n  </Wrapper>\n);\n\nexport default ItemBlog;\n\nItemBlog.propTypes = {\n  path: PropTypes.string.isRequired,\n  cover: PropTypes.any.isRequired,\n  category: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  excerpt: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport { Helmet } from \"react-helmet\"\nimport styled from '@emotion/styled'\nimport { Container, Layout } from 'elements';\nimport config from '../../config/website';\nimport ItemBlog from '../components/ItemBlog';\nimport Footer from '../components/Footer';\nimport Header from '../components/Header';\n\nconst Base = styled.div`\n  margin-top: 2.5rem;\n  margin-bottom: 2.5rem;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst System = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}) => (\n  <Layout>\n    <Helmet title={`System Design | ${config.siteTitle}`} />\n    <Header title=\"Distributed System Design\">\n      Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.\n    </Header>\n    <Container type=\"big\">\n      <Base>\n        {edges.map(system => (\n          <ItemBlog\n            key={system.node.frontmatter.title}\n            path={system.node.fields.slug}\n            cover={system.node.frontmatter.cover.childImageSharp.fluid}\n            title={system.node.frontmatter.title}\n            date={system.node.frontmatter.date}\n            category={system.node.frontmatter.category}\n            timeToRead={system.node.timeToRead}\n            excerpt={system.node.excerpt}\n            tags={system.node.frontmatter.tags}\n          />\n        ))}\n      </Base>\n    </Container>\n    <Footer />\n  </Layout>\n);\n\nexport default System;\n\nSystem.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.array.isRequired,\n    }),\n  }).isRequired,\n};\n\nexport const pageQuery = graphql`\n  query SystemQuery {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { fields: { sourceInstanceName: { eq: \"system\" } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          excerpt(pruneLength: 300)\n          timeToRead\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\", locale: \"en\")\n            category\n            tags\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 900, quality: 85, traceSVG: { color: \"#2B2B2F\" }) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}