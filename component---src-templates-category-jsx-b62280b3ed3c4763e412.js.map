{"version":3,"sources":["webpack:///./src/components/Header.jsx","webpack:///./src/components/Tags.jsx","webpack:///./src/components/ItemTagCategory.jsx","webpack:///./src/templates/category.jsx"],"names":["Wrapper","props","theme","gradient","rightToLeft","big","breakpoints","m","s","Text","colors","white","base","layout","Subtitle","blue","Header","children","title","defaultProps","TagsContainer","tint","black","light","borderRadius","default","darken","Tags","tags","map","tag","key","to","kebabCase","Information","transitions","duration","primary","Statistics","lighter","Excerpt","ItemTagCategory","category","path","date","timeToRead","excerpt","className","hideS","StyledLink","Link","Category","pageContext","data","allMarkdownRemark","edges","totalCount","config","siteTitle","edge","node","frontmatter","fields","slug","pageQuery"],"mappings":"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","file":"component---src-templates-category-jsx-b62280b3ed3c4763e412.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\nimport { Wave } from '../elements';\n\nconst Wrapper = styled.header`\n  background: ${(props) => props.theme.gradient.rightToLeft};\n  height: ${(props) => (props.big ? '650px' : '450px')};\n  @media (max-width: ${(props) => props.theme.breakpoints.m}) {\n    height: ${(props) => (props.big ? '600px' : '400px')};\n  }\n  @media (max-width: ${(props) => props.theme.breakpoints.s}) {\n    height: ${(props) => (props.big ? '500px' : '325px')};\n  }\n  position: relative;\n  overflow: hidden;\n`;\n\nconst Text = styled.div`\n  color: ${(props) => props.theme.colors.white.base};\n  z-index: 1000;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  width: 100%;\n  max-width: ${(props) => props.theme.layout.base};\n  padding: 0 2rem;\n  margin-bottom: 7rem;\n  align-items: center;\n`;\n\nconst Subtitle = styled.p`\n  max-width: 650px;\n  color: ${(props) => props.theme.colors.white.blue};\n`;\n\nconst Header = ({ children, title, big }) => (\n  <Wrapper big={big}>\n    <Text>\n      <h1>{title}</h1>\n      {children && <Subtitle>{children}</Subtitle>}\n    </Text>\n    <Wave />\n  </Wrapper>\n);\n\nexport default Header;\n\nHeader.propTypes = {\n  children: PropTypes.any,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n  big: PropTypes.bool,\n};\n\nHeader.defaultProps = {\n  big: false,\n  children: false,\n};\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport kebabCase from 'lodash/kebabCase';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport { darken } from 'polished';\n\nconst TagsContainer = styled.div`\n  margin: 1rem 0;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  a {\n    background: ${(props) => props.theme.tint.black};\n    color: ${(props) => props.theme.colors.black.light};\n    font-size: 0.9rem;\n    padding: 0.2rem 0.75rem;\n    border-radius: ${(props) => props.theme.borderRadius.default};\n    margin: 0.3rem 0.6rem 0.3rem 0;\n    white-space: nowrap;\n    &:hover {\n      background: ${(props) => darken(0.35, props.theme.tint.black)};\n      color: ${(props) => darken(0.35, props.theme.colors.black.light)};\n    }\n  }\n`;\n\nconst Tags = ({ tags }) => (\n  <TagsContainer>\n    {tags &&\n      tags.map((tag) => (\n        <Link key={tag} to={`/tags/${kebabCase(tag)}`}>\n          <span>{tag}</span>\n        </Link>\n      ))}\n  </TagsContainer>\n);\n\nexport default Tags;\n\nTags.propTypes = {\n  tags: PropTypes.array.isRequired,\n};\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport kebabCase from 'lodash/kebabCase';\nimport { hideS } from '../utilities';\nimport Tags from './Tags';\n\nconst Wrapper = styled.article`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 4rem;\n  margin-top: 2rem;\n`;\n\nconst Information = styled.div`\n  h1 {\n    font-size: 2rem;\n    margin-bottom: 1.25rem;\n    display: inline-block;\n    color: ${(props) => props.theme.colors.black.base};\n    transition: all ${(props) => props.theme.transitions.default.duration};\n    &:hover {\n      color: ${(props) => props.theme.colors.primary.base};\n    }\n  }\n`;\n\nconst Statistics = styled.div`\n  color: ${(props) => props.theme.colors.black.lighter};\n`;\n\nconst Excerpt = styled.div`\n  margin-top: 1rem;\n`;\n\nconst ItemTagCategory = ({ category, path, title, date, timeToRead, tags, excerpt }) => (\n  <Wrapper>\n    <Information>\n      <Link to={path}>\n        <h1>{title}</h1>\n      </Link>\n      <Statistics>\n        {date} &mdash; Lesezeit: {timeToRead} Min. &mdash; <span className={hideS}>Category: </span>\n        <Link to={`/categories/${kebabCase(category)}`}>{category}</Link>\n      </Statistics>\n      <Tags tags={tags} />\n      <Excerpt>{excerpt}</Excerpt>\n    </Information>\n  </Wrapper>\n);\n\nexport default ItemTagCategory;\n\nItemTagCategory.propTypes = {\n  category: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  tags: PropTypes.array.isRequired,\n  excerpt: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\nimport { Helmet } from 'react-helmet';\nimport { Container, Layout } from '../elements';\nimport config from '../../config/website';\nimport Footer from '../components/Footer';\nimport Header from '../components/Header';\nimport ItemTagCategory from '../components/ItemTagCategory';\n\nconst StyledLink = styled(Link)`\n  color: ${(props) => props.theme.colors.white.light};\n`;\n\nconst Category = ({\n  pageContext: { category },\n  data: {\n    // eslint-disable-next-line react/prop-types\n    allMarkdownRemark: { edges, totalCount },\n  },\n}) => (\n  <Layout>\n    <Helmet title={`${category} | ${config.siteTitle}`} />\n    <Header title={category}>\n      <StyledLink to=\"/categories\">See All Categories</StyledLink>\n    </Header>\n    <Container>\n      {edges.map((edge) => (\n        <ItemTagCategory\n          key={edge.node.frontmatter.title}\n          title={edge.node.frontmatter.title}\n          category={edge.node.frontmatter.category}\n          path={edge.node.fields.slug}\n          date={edge.node.frontmatter.date}\n          timeToRead={edge.node.timeToRead}\n          tags={edge.node.frontmatter.tags}\n          excerpt={edge.node.excerpt}\n        />\n      ))}\n    </Container>\n    <Footer />\n  </Layout>\n);\n\nexport default Category;\n\nCategory.propTypes = {\n  pageContext: PropTypes.shape({\n    category: PropTypes.string.isRequired,\n  }).isRequired,\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.array.isRequired,\n    }),\n  }).isRequired,\n};\n\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { eq: $category } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          excerpt(pruneLength: 300)\n          timeToRead\n          frontmatter {\n            title\n            tags\n            date(formatString: \"DD. MMMM YYYY\", locale: \"de\")\n            category\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}